// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: gocosi.proto

package gocosi

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GocosiRPCClient is the client API for GocosiRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GocosiRPCClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*CommonResp, error)
	NewMsg(ctx context.Context, in *NewMsgReq, opts ...grpc.CallOption) (*NewMsgResp, error)
	GossipReq(ctx context.Context, in *Gossip, opts ...grpc.CallOption) (*CommonResp, error)
	Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResp, error)
	GetPubkey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPubkeyResp, error)
}

type gocosiRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewGocosiRPCClient(cc grpc.ClientConnInterface) GocosiRPCClient {
	return &gocosiRPCClient{cc}
}

func (c *gocosiRPCClient) RegisterNode(ctx context.Context, in *RegisterNodeReq, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gocosi.GocosiRPC/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gocosiRPCClient) NewMsg(ctx context.Context, in *NewMsgReq, opts ...grpc.CallOption) (*NewMsgResp, error) {
	out := new(NewMsgResp)
	err := c.cc.Invoke(ctx, "/gocosi.GocosiRPC/NewMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gocosiRPCClient) GossipReq(ctx context.Context, in *Gossip, opts ...grpc.CallOption) (*CommonResp, error) {
	out := new(CommonResp)
	err := c.cc.Invoke(ctx, "/gocosi.GocosiRPC/GossipReq", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gocosiRPCClient) Info(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/gocosi.GocosiRPC/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gocosiRPCClient) GetPubkey(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetPubkeyResp, error) {
	out := new(GetPubkeyResp)
	err := c.cc.Invoke(ctx, "/gocosi.GocosiRPC/GetPubkey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GocosiRPCServer is the server API for GocosiRPC service.
// All implementations must embed UnimplementedGocosiRPCServer
// for forward compatibility
type GocosiRPCServer interface {
	RegisterNode(context.Context, *RegisterNodeReq) (*CommonResp, error)
	NewMsg(context.Context, *NewMsgReq) (*NewMsgResp, error)
	GossipReq(context.Context, *Gossip) (*CommonResp, error)
	Info(context.Context, *Empty) (*InfoResp, error)
	GetPubkey(context.Context, *Empty) (*GetPubkeyResp, error)
	mustEmbedUnimplementedGocosiRPCServer()
}

// UnimplementedGocosiRPCServer must be embedded to have forward compatible implementations.
type UnimplementedGocosiRPCServer struct {
}

func (UnimplementedGocosiRPCServer) RegisterNode(context.Context, *RegisterNodeReq) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedGocosiRPCServer) NewMsg(context.Context, *NewMsgReq) (*NewMsgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMsg not implemented")
}
func (UnimplementedGocosiRPCServer) GossipReq(context.Context, *Gossip) (*CommonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GossipReq not implemented")
}
func (UnimplementedGocosiRPCServer) Info(context.Context, *Empty) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedGocosiRPCServer) GetPubkey(context.Context, *Empty) (*GetPubkeyResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPubkey not implemented")
}
func (UnimplementedGocosiRPCServer) mustEmbedUnimplementedGocosiRPCServer() {}

// UnsafeGocosiRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GocosiRPCServer will
// result in compilation errors.
type UnsafeGocosiRPCServer interface {
	mustEmbedUnimplementedGocosiRPCServer()
}

func RegisterGocosiRPCServer(s grpc.ServiceRegistrar, srv GocosiRPCServer) {
	s.RegisterService(&GocosiRPC_ServiceDesc, srv)
}

func _GocosiRPC_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GocosiRPCServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocosi.GocosiRPC/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GocosiRPCServer).RegisterNode(ctx, req.(*RegisterNodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GocosiRPC_NewMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMsgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GocosiRPCServer).NewMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocosi.GocosiRPC/NewMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GocosiRPCServer).NewMsg(ctx, req.(*NewMsgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GocosiRPC_GossipReq_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Gossip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GocosiRPCServer).GossipReq(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocosi.GocosiRPC/GossipReq",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GocosiRPCServer).GossipReq(ctx, req.(*Gossip))
	}
	return interceptor(ctx, in, info, handler)
}

func _GocosiRPC_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GocosiRPCServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocosi.GocosiRPC/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GocosiRPCServer).Info(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GocosiRPC_GetPubkey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GocosiRPCServer).GetPubkey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocosi.GocosiRPC/GetPubkey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GocosiRPCServer).GetPubkey(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// GocosiRPC_ServiceDesc is the grpc.ServiceDesc for GocosiRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GocosiRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocosi.GocosiRPC",
	HandlerType: (*GocosiRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _GocosiRPC_RegisterNode_Handler,
		},
		{
			MethodName: "NewMsg",
			Handler:    _GocosiRPC_NewMsg_Handler,
		},
		{
			MethodName: "GossipReq",
			Handler:    _GocosiRPC_GossipReq_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _GocosiRPC_Info_Handler,
		},
		{
			MethodName: "GetPubkey",
			Handler:    _GocosiRPC_GetPubkey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gocosi.proto",
}
